version: '3.3'
services:
  engine:
    image: 'openjdk:8-jre-alpine'
    container_name: ${APP_NAME}_${ENGINE_HOST}
    # TODO: need to remove in production
    ports:
      - '4000:4000'
    volumes:
      - "./data/opt/parity:/opt/parity"
    expose:
      - "4000/tcp"
      - "5001/udp"
      - "5000/udp"
      - "6000/udp"
      - "6001/udp"
    entrypoint:
      - /usr/bin/java
      - -jar
      - /opt/parity/parity-system.jar
      - /opt/parity/parity-system.conf
    networks:
      - core-net
  fix:
    image: 'openjdk:8-jre-alpine'
    container_name: ${APP_NAME}_${FIX_HOST}
    expose:
      - "4010"
    volumes:
      - "./data/opt/parity:/opt/parity"
    entrypoint:
      - /usr/bin/java
      - -jar
      - /opt/parity/parity-fix.jar
      - /opt/parity/parity-fix.conf
    depends_on:
      - engine
    networks:
      - core-net
      - web-net
  wsreporter:
    image: 'openjdk:8-jre-alpine'
    container_name: ${APP_NAME}_${REPORTER_HOST}
    volumes:
      - "./data/opt/parity:/opt/parity"
    entrypoint:
      - /usr/bin/java
      - -jar
      - /opt/parity/parity-wsreporter.jar
      - -t
      - /opt/parity/parity-reporter.conf
    depends_on:
      - engine
      - crossbar
    networks:
      - web-net
      - core-net
  ticker:
      image: 'openjdk:8-jre-alpine'
      container_name: ${APP_NAME}_${TICKER_HOST}
      volumes:
        - "./data/opt/parity:/opt/parity"
      entrypoint:
        - /usr/bin/java
        - -jar
        - /opt/parity/parity-wsticker.jar
        - /opt/parity/parity-ticker.conf
      depends_on:
        - engine
        - crossbar
      networks:
        - core-net
        - web-net
#  client:
#    image: 'openjdk:8-jre-alpine'
#    volumes:
#      - "./data/opt/parity:/opt/parity"
#    depends_on:
#      - engine
#  market-data-gateway:
#    build: './docker/nassau-soupbintcp-gateway'
#    ports:
#      - '5000:5000'
#    environment:
#      NASSAU_SOUPBINTCP_GATEWAY_UPSTREAM_MULTICAST_PORT: '5000'
#      NASSAU_SOUPBINTCP_GATEWAY_UPSTREAM_REQUEST_PORT: '5001'
#  market-reporting-gateway:
#    build: './docker/nassau-soupbintcp-gateway'
#    ports:
#      - '6000:5000'
#    environment:
#      NASSAU_SOUPBINTCP_GATEWAY_UPSTREAM_MULTICAST_PORT: '6000'
#      NASSAU_SOUPBINTCP_GATEWAY_UPSTREAM_REQUEST_PORT: '6001'
  api:
    container_name: ${APP_NAME}_${API_HOST}
    build: ${API_CODE}
    restart: always
    ports:
      - '3500:3000'
    expose:
      - '3000'
    depends_on:
      - 'mongo'
    networks:
      - db-net
      - web-net
  proxy:
    image: 'jwilder/nginx-proxy'
    container_name: ${APP_NAME}_${PROXY_HOST}
    ports:
      - '8081:80'
      - '8443:443'
    networks:
      - web-net
    depends_on:
      - crossbar
    volumes:
      - "./data/etc/nginx/nginx.conf:/etc/nginx/conf.d/my_proxy.conf"
      - "./data/var/log:/var/log/"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "./docker/nginx/www/:/var/www/"
  mongo:
    image: 'mongo:latest'
    container_name: ${APP_NAME}_${MONGO_HOST}
    restart: always
    # just need in developing
    # in production it should be remove
    ports:
      - '27100:27017'
    volumes:
      - "./data/db/mongo:/data/db:rw"
    expose:
      - '27017'
    networks:
      - db-net
#  mysqldb:
#    image: mysql
#    container_name: ${APP_NAME}_${MYSQL_HOST}
#    restart: always
#    env_file:
#      - ".env"
#    environment:
#      - MYSQL_DATABASE=${MYSQL_DATABASE}
#      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
#      - MYSQL_USER=${MYSQL_USER}
#      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
#    ports:
#      - "8989:3306"
#    volumes:
#      - "./data/db/mysql:/var/lib/mysql"
  crossbar:
    image: 'crossbario/crossbar'
    container_name: ${APP_NAME}_${CROSSBAR_HOST}
    restart: always
    expose:
      - '8080'
    networks:
      - web-net
    volumes:
      - "./data/opt/crossbar:/node"
#      - "./data/var/log/crossbar:/var/log/crossbar"
#    entrypoint:
#      - crossbar
#      - start
#      - --cbdir
#      - /node/.crossbar
#      - --logdir
#      - /var/log/crossbar
  replicator:
    build: "./docker/replicator"
    container_name: ${APP_NAME}_${REPLICATOR_HOST}
    depends_on:
      - engine
      - ticker
    networks:
      - core-net
#    entrypoint:
#      - /bin/sh

networks:
  core-net:
  db-net:
  web-net:

